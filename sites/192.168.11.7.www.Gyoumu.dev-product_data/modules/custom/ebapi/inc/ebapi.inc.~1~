<?php
namespace Ebapi;

require_once __DIR__ . '/../inc/Services_Ebay/Ebay.php';

module_load_include('inc', 'GuLib', '/include/GuTable');
module_load_include('inc', 'GuLib', '/include/page');

class ApiHelper
{
  private $sandbox;

  public function __construct($sandbox)
  {
    $this->sandbox = $sandbox;
  }

  public function getRuName()
  {
    if($this->sandbox){
      return 'Maolung-Maolung71-9e40--cqotxnjz';
    }
    return 'Maolung-Maolungf1-057f--xwubahhpm';
  }

  public function getSession()
  {
    if($this->sandbox){
      $devId  = 'ebfad531-903c-41e4-b1af-d16369d81e75';
      $appId  = 'Maolung71-9e40-49c5-9a37-aa903b58a1b';
      $certId = '6cd3588e-d011-4618-96c6-c251c47f99c7';
      //    $token = 'AgAAAA**AQAAAA**aAAAAA**nwiMTg**nY+sHZ2PrBmdj6wVnY+sEZ2PrA2dj6wFk4GhCJCGpQSdj6x9nY+seQ**ASkBAA**AAMAAA**h2S/tokAFDJfAa0TuSHEYcXxVS4zN2FlxDBfXegfjJQ28h4bp6C6jYGXpa6KXTq1xfaw7dOdZYy2XuLaVngFN11Lj3aHjep6HMnvEye3ncgka6xRAmqcSX4SEavH1mBWhae7INI5YeIWBD0aYPicoC+Z6U+PXyOC6s9AWvQkNOxn1xhWen7oWJx20uETOSBUw/Bt4Y1ZuWCuBx5jkIgGEWw0GKyK9wwvCYGVeM6tfeFRt92K2iWsYvYoiWznfzEgpmpCtVQfjchiYJ+Lr+fJFvdJesiREPJJ5r40PGZSZUgeYeAVESme0UVdAqdqFiHKcFMg27UpRCgyNhRbINfWxwX6QLqWQrIm7xVlIVSQY5B5gPLr5guTLMSGOIVgbq+yRMCVd32avQGu5q7T4lZ6wxM7S76qhR15S49bD2RSleG3TaS2fqplWA9oEKhA5g17X7wn+qkRdPkNDmtbL+ZYp2pOH6K8saiLhuKvXtx78knpW555x79T/miqw7cXtMtHdHFq+zjGOgSvTuaYgtaSsDpxJcCsIO/7Qq/twYfyKIEGskXznguFcIQQ9PzeL/dBBWoPCLe9D3mSd/5/J9vXxv+OXYI5lhzFyy2BGfULFHNWrA7W8dc28V0F62E4fMYgK51okpOACVkxfGy6vqDEq3ach6EL8KJOYspv4TLL/zdTODQ6cUxccGmez2+55disfmrnZjeSJrFyw41LIiBXcPv8HzgFGYnJ6Z11Yqf59Ai4ImewhyNEN/1YqJLpbgH+';
      return \Services_Ebay::getSandboxSession($devId, $appId, $certId);
    }

    $devId  = 'ebfad531-903c-41e4-b1af-d16369d81e75';
    $appId  = 'Maolungf1-057f-4fba-b6ef-a4799e15da0';
    $certId = 'c316d544-82e1-4535-bf46-f4aa59a738f5';
    //    $token = 'AgAAAA**AQAAAA**aAAAAA**hkuqTg**nY+sHZ2PrBmdj6wVnY+sEZ2PrA2dj6wNmYKmAJGLogudj6x9nY+seQ**IksBAA**AAMAAA**l9od22Wv9AGV6Q40/rJj/AqJcvmokLvxcT6c6dWDCzj0wjUgFXoPX0XITeJ2lmkoNbr43s5NlFl2yYXa6IU5rksbHo3Ia2epetkee1DfrzdHNSfs/S+fh3+GMXsQXlXVpEu+urcdHk/MHQ1i+RF7/nQzmvIWl+koY9U/d58Cga56rJ2Ccm0dBpqEEavJFEOTrLr3FD5HljXKATIcmpS3cYmDw/vbnMjyhhDxbQVt40mrKxQvV/5ONma/AgByuTGLik0ox/Mamaf8K4SDzT1HGYM6rjDFica47/Agt+lVyKS133S8ol19d40JTtVnRzGAX7+qhFTSg4fcrcB8kHZe9jaNDsXYlh0GJUlrG7oKvXCyGZWJsjll/QADdbNv51Wujtzz6A0rd804gsbYdyGphgPzbtAbJzpiK6ZrPposUDe8oFcb3tYIMVlxWYRevIo33ZpuXQGvPeaoQhWx3yMiFg+oXsKHYNNUJX9AmjWtqzY2lFkn4Pu4+fTAFCVTZYrT/G0wDXHU3Q3eiE3eZd39zE+yF1xv6n6GHA3upzyoomxESKx2F8XqSNmt03K4P9Rix0Jq8kT11MHIUKo4VRJ8eVac48XEw26VWc8rLye5Vi+01ZH9SJcSKCFAPFErH7SsfZ9nbkfrNju42S+YcsF+llUHg92a0OrLW6UEIbonseHNylla8HpirpbjHrxrwA3sJC7qV+8SyWuM2L8DeAPPE7CQ1DJrV8nXmVLtqM1rbRlAnKVSZWhAMaNiy93/5R6E';
    return \Services_Ebay::getSession($devId, $appId, $certId);
  }

  private function getQuery()
  {
    return new \Services_Ebay($this->getSession());
  }

  public function getSessionID()
  {
    $q = $this->getQuery();
    return $q->GetSessionID($this->getRuName());
  }

  public function getSignLink($sid)
  {
    $tpl = $this->sandbox
        ? "https://signin.sandbox.ebay.com/ws/eBayISAPI.dll?SignIn&RuName=%s&SessID=%s"
        : "https://signin.ebay.com/ws/eBayISAPI.dll?SignIn&RuName=%s&SessID=%s";

    return sprintf($tpl, $this->getRuName(), $sid);
  }

  public function fetchToken($sid)
  {
    $q = $this->getQuery();
    return $q->FetchToken($sid);
  }
}

abstract class AbstractApiCall
{
  protected $Account;

  public function __construct($Account)
  {
    $this->Account = $Account;
  }
}

class Listing extends AbstractApiCall
{
  protected $ItemID;
  protected $item;

  public function __construct($Account, $ItemID)
  {
    parent::__construct($Account);
    $this->ItemID = $ItemID;
  }

  public function getDetails($param = array())
  {
    $this->item = \Services_Ebay::loadModel('Item', $this->ItemID, $this->Account->getSession());
    $this->item->Get($param);
    return $this->item->toArray();
  }

  private function renderFitment($comp)
  {
    $vlist = &$comp['NameValueList'];
    $newVlist = array();

    foreach($vlist as $each){
      if($name = $each['Name']){
        $newVlist[$name] = $each;
      }
    }
    $vlist = $newVlist;
    return $comp;
  }

  public function getCompList()
  {
    $resp = $this->getDetails(array('IncludeItemCompatibilityList' => '1'));
    $comp = $resp['ItemCompatibilityList']['Compatibility'];
    $list = array();

    if(isset($comp['NameValueList'])){
      return array($this->renderFitment($comp));
    }
    else if(is_array($comp)){
      foreach($comp as $eachComp){
        $list[] = $this->renderFitment($eachComp);
      }
    }
    return $list;
  }
}

abstract class AbstractPageMySelling extends \Gulei\Page\Form\_Abstract
{
  protected $accnt;
  abstract protected function getArch();
  abstract protected function getAhahPath();

  protected $PAGE_ITEMS = 40;
  protected $resp;

  protected function getSearchSku()
  {
    if(!($sku = $_GET['search-sku'])){
      $sku = $this->form_state['values']['search-sku'];
    }
    return $sku;
  }

  protected function getSearchSkuArray()
  {
    $str = $this->getSearchSku();
    $skus = explode("\n", $str);
    $skus = array_map('trim', $skus);
    $skus = array_filter($skus);
    return $skus;
  }

  protected function getRecs()
  {
    $Account = new AccountController($this->accnt);
    $ebay = $Account->getQuery();

    $param = array(
      'EndTimeFrom' => \eBayDateHelper::getDate('now -5minutes'),
      'EndTimeTo' => \eBayDateHelper::getDate('now +31days'),
      'Pagination' => array(
        'EntriesPerPage' => $this->PAGE_ITEMS,
      ),
    );

    if($skus = $this->getSearchSkuArray()){
      $param['SKUArray'] = array(
        'SKU' => $skus,
      );
    }

    $list = $ebay->GetSellerList($param);
    $this->resp = $list->toArray();

    if($items = $this->resp['ItemArray']['Item']){
      if(isset($items['ItemID'])){
        $items = array($items);
      }
    }
    else{
      $items = array();
    }

    $recs = array();
    foreach($items as $item){
      $recs[] = array(
        'ItemID' => $item['ItemID'],
        'Title' => l(
          $item['Title'], $item['ListingDetails']['ViewItemURL'],
          array('attributes' => array('target' => '_blank'))
        ),
        'SKU' => $item['SKU'],
        'Site' => $item['Site'],
        'StartTime' => $item['ListingDetails']['StartTime'],
        'ListingType' => $item['ListingType'],
        'BuyItNowPrice' => $item['BuyItNowPrice'],
        'CurrentPrice' => $item['SellingStatus']['CurrentPrice'],
        'MinimumToBid' => $item['SellingStatus']['MinimumToBid'],
        'ShippingServiceCost' => $item['ShippingDetails']['ShippingServiceOptions']['ShippingServiceCost'],
        'QuantityAvailable' => $item['QuantityAvailable'],
        'Quantity' => $item['Quantity'],
      );
    }

    return $recs;
  }

  private function getEleAhah($param){
    $ele = array_merge(
      array(
           '#ahah' => array(
//             'path' => 'ebapi/myebay/selling/js',
             'path' => $this->getAhahPath(),
             'wrapper' => 'ebapi-listings-wrapper',
           ),
      ),
      $param
    );
    return $ele;
  }

  protected function getEleSearch()
  {
    $ele = array();

    $ele['searchpanel-search'] = array(
      '#type' => 'fieldset',
      '#prefix' => '<div class="ebapi-searchpanel-search">',
      '#suffix' => '</div>',
    );

    $ele['searchpanel-search']['search-sku'] = array(
      '#title' => 'SKUs',
      '#type' => 'textarea',
      '#description' => 'Sepreate SKUs each line.',
      '#default_value' => ($dval = $this->getSearchSku()) ? $dval : '',
    );

    $ele['searchpanel-buttons'] = array(
      '#type' => 'fieldset',
      '#prefix' => '<div class="ebapi-searchpanel-buttons">',
      '#suffix' => '</div>',
    );

    $ele['searchpanel-buttons']['search-search'] = $this->getEleAhah(
      array(
           '#type' => 'submit',
           '#value' => 'Search',
           '#name' => 'submit',
      )
    );

    $ele['searchpanel-buttons']['search-clear'] = $this->getEleAhah(
      array(
           '#type' => 'submit',
           '#value' => 'Clear',
           '#name' => 'submit',
      )
    );

    return $ele;
  }

  protected function getEleList()
  {
    $arch = $this->getArch();
    $t = new ListingTable($arch, $this->getRecs(), array('type' => 'select-many'));
    $ele = $t->getFormEles();
    $ele['#prefix'] = sprintf('<div>%s<div id="ebapi-listings-list">', $this->getExceedingMessage());
    $ele['#suffix'] = '</div></div>';
    return $ele;
  }

  private function getExceedingMessage()
  {
    if($this->resp['PaginationResult']['TotalNumberOfPages'] > 1){
      return '<div id="exc_warning">Exceeds limitation of items per page: ' . $this->PAGE_ITEMS . '. Remaining items are hidden.</div>';
    }
    return '';
  }

  public function hook_form(&$form_state, $accnt)
  {
    $this->accnt = $accnt;
    $form = array();

    $form['wrapper'] = array(
      '#type' => 'fieldset',
      '#prefix' => '<div id="ebapi-listings-wrapper">',
      '#suffix' => '</div>',
    );

    $form['wrapper']['accnt'] = array(
      '#type' => 'hidden',
      '#value' => $accnt,
    );

    $form['wrapper']['search'] = $this->getEleSearch();
    $form['wrapper']['list'] = $this->getEleList();
    return $form;
  }

  public function hook_form_js($form_id)
  {
    $form_state = array('values' => $_POST);
    $this->form_state = $form_state;

    if($form_state['values']['submit'] == 'Clear'){
      $this->form_state = $form_state = array();
    }

    $form = $this->hook_form($form_state, $_POST['accnt']);
    drupal_process_form($form_id, $form, $form_state);

    unset($form['wrapper']['#prefix'], $form['wrapper']['#suffix']);
    $output = theme('status_messages') . drupal_render($form['wrapper']);
    drupal_json(array('status' => TRUE, 'data' => $output));
  }

  protected function proc_wrapper_search_search_search($form, &$form_state)
  {
    $this->goBack(false);
  }

  protected function proc_wrapper_search_search_clear($form, &$form_state)
  {
    $this->goBack();
  }
}

class PageMySelling extends AbstractPageMySelling
{
  protected function getArch()
  {
    return <<<XML
  <tree>
    <field name="ItemID"/>
    <field name="Site"/>
    <field name="SKU"/>
    <field name="Title"/>
    <field name="ListingType"/>
    <field name="BuyItNowPrice"/>
    <field name="CurrentPrice" string="Cur.Price"/>
    <field name="MinimumToBid" string="Min.Bid"/>
    <field name="ShippingServiceCost" string="S.Fee"/>
    <field name="QuantityAvailable" string="Qty"/>
    <field name="Quantity" string="Qty"/>
    <field name="StartTime"/>
  </tree>
XML;
  }

  protected function getAhahPath()
  {
    return 'ebapi/myebay/selling/js';
  }
}

class ListingTable extends \GuSelectTable
{
  protected function getSelectionValue($rec, $ind){
    return $rec['ItemID'];
  }
}

class AccountController
{
  const STATUS_NO_REC = 0;
  const STATUS_NEW = 1;
  const STATUS_CONSENTED = 2;

  const TYPE_PRODUCTION = 1;
  const TYPE_SANDBOX = 2;

  private $account;

  public function __construct($account)
  {
    $this->account = $account;
  }

  public static function getAccounts()
  {
    $sql = 'SELECT `account`, `type` FROM {ebapi_account} ORDER BY `type`, `account`';
    $rs = \db_query($sql);

    $type_map = array(
      self::TYPE_PRODUCTION => 'Production',
      self::TYPE_SANDBOX => 'Sandbox',
    );

    $recs = array();
    while($data = \db_fetch_object($rs)){
      $rec = array(
        'type' => $type_map[$data->type],
        'account' => $data->account
      );
      $recs[] = $rec;
    }
    return $recs;
  }

  public static function getListSource()
  {
    $recs = self::getAccounts();

    $arch = <<<XML
<tree>
  <field name="type" string="Type"/>
  <field name="account" string="Account"/>
</tree>
XML;

    $t = new \GuArchTable($arch, new \Gulei\Provider\Lambda($recs));
    return $t->theme();
  }

  public function getRecord()
  {
    $sql = 'SELECT * FROM {ebapi_account} WHERE account="%s" LIMIT 1';
    $rs = \db_query($sql, $this->account);
    return \db_fetch_object($rs);
  }

  public function getStatus()
  {
    $status = $this->getRecord()->status;
    return $status ? $status : self::STATUS_NO_REC;
  }

  public function updateSessionID($sid)
  {
    $Account = new \stdClass();
    $Account->account = $this->account;
    $Account->session_id = $sid;
    $status = $this->getStatus();

    if($status){
      $resp = drupal_write_record('ebapi_account', $Account, 'account');
    }
    else{
      $Account->status = self::STATUS_NEW;
      $resp = drupal_write_record('ebapi_account', $Account);
    }
    return $resp;
  }

  public function updateUserToken($user_token, $accnt_type)
  {
    $Account = new \stdClass();
    $Account->account = $this->account;
    $Account->user_token = $user_token;
    $Account->type = $accnt_type;
    $status = $this->getStatus();

    if($status){
      $resp = drupal_write_record('ebapi_account', $Account, 'account');
    }
    else{
      $Account->status = self::STATUS_NEW;
      $resp = drupal_write_record('ebapi_account', $Account);
    }
    return $resp;
  }

  public function isSandbox()
  {
    $rec = $this->getRecord();
    return $rec->type == self::TYPE_SANDBOX;
  }

  public function getSession()
  {
    $helper = new ApiHelper($this->isSandbox());
    $sess = $helper->getSession();
    $sess->setToken($this->getRecord()->user_token);
    return $sess;
  }

  public function getQuery()
  {
    $sess = $this->getSession();
    return new \Services_Ebay($sess);
  }

  public function getItem($ItemID)
  {
    $Item = \Services_Ebay::loadModel('Item', $ItemID, $this->getSession());
    $Item->Get();
    return $Item;
  }
}

class PageItem extends \FormPageController
{
  private $seller;
  private $ItemID;
  private $Item;
  private $vals;

  private function getItemObj()
  {
    if(is_null($this->Item)){
      $Acc = new AccountController($this->seller);
      $this->Item = $Acc->getItem($this->ItemID);
    }
    return $this->Item;
  }

  private function getVals($anchors = null)
  {
    if(is_null($this->vals)){
      $this->vals = $this->getItemObj()->toArray();
    }

    if(is_null($anchors)){
      return $this->vals;
    }

    $anchors = explode('/', $anchors);
    $vals = $this->vals;
    $val = $vals[\array_shift($anchors)];

    foreach($anchors as $anchor){
      $val = $val[$anchor];
    }
    return $val;
  }

  private function getSendEles()
  {
    $arch = <<<XML
<fields>
  <field name="Title" type="textfield"/>
  <field name="SKU" type="textfield"/>
  <field name="Quantity" type="textfield"/>
</fields>
XML;

    $f = new \GuForm($arch, $this->getVals());
    return $f->getFormEles();
  }

  public function hook_form(&$form_state, $seller, $ItemID)
  {
    $this->seller = $seller;
    $this->ItemID = $ItemID;

    $form = array();
    $form['#tree'] = true;

    $form['obj'] = array(
      '#type' => 'value',
      '#value' => $this->getItemObj(),
    );

    $form['send'] = $this->getSendEles();

    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => 'Revise',
    );

    return $form;
  }

  protected function proc_submit($form, &$form_state)
  {
    $send = $form_state['values']['send'];
    $obj = $form['obj']['#value'];

    foreach($send as $key => $val){
      $obj->$key = $val;
    }
    $obj->Revise();

    drupal_set_message('Item revised successfully.');
  }
}