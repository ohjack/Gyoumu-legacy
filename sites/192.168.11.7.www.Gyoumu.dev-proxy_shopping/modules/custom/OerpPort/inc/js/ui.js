// Generated by CoffeeScript 1.7.1
(function() {
  var OerpJsEditor, OerpJsEditorPrompt, OerpJsRecordSelector, OerpMany2oneWidget, OerpPrompt, OerpPromptForm, OerpRowPromptEditor, OerpSearchPanel, OerpTabs, OerpTreeWidget,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  OerpJsEditor = (function(_super) {
    __extends(OerpJsEditor, _super);

    function OerpJsEditor() {
      this.createEle = __bind(this.createEle, this);
      this.init = __bind(this.init, this);
      this.setDVals = __bind(this.setDVals, this);
      this.reset = __bind(this.reset, this);
      this.reload = __bind(this.reload, this);
      this.save = __bind(this.save, this);
      this.getSend = __bind(this.getSend, this);
      return OerpJsEditor.__super__.constructor.apply(this, arguments);
    }

    OerpJsEditor.prototype.getSend = function() {
      var $ele, $form, ele_type, funcLambda, post, required_pass, resp, send, src, val, _i, _len;
      $form = $(this.$node).find('form:eq(0)');
      send = {
        '#value': {}
      };
      $form.find('div.oerp-treeview').each(function() {
        var $treeview, fld_name, send_inner;
        $treeview = $(this);
        send_inner = {};
        $treeview.find('tr[oerp_rid]').each(function() {
          var $tr;
          $tr = $(this);
          if ($tr.data('vals')) {
            return send_inner[$tr.attr('oerp_rid')] = $tr.data('vals');
          }
        });
        fld_name = $treeview.children('input[type="hidden"]:eq(0)').attr('name').replace('[json]', '');
        return send['#value'][fld_name] = send_inner;
      });
      post = $form.serializeArray();
      $form.find('input:checkbox').each(function() {
        var $checkbox;
        $checkbox = $(this);
        if ($checkbox.attr('checked') === false) {
          return post.push({
            name: $checkbox.attr('name'),
            value: false
          });
        }
      });
      required_pass = true;
      for (_i = 0, _len = post.length; _i < _len; _i++) {
        val = post[_i];
        $ele = $form.find("[name='" + val['name'] + "']");
        ele_type = $ele.parents('div[oerp_type]:eq(0)').attr('oerp_type');
        if ($ele.hasClass('required') && !val['value']) {
          $ele.addClass('error');
          required_pass = false;
        }
        src = $ele.attr('prepareSend');
        if (!$ele.attr('no-override') && src) {
          funcLambda = new Function('form', 'ele', 'fld', src);
          resp = funcLambda($form, $ele, val);
          send['#value'][resp['#name']] = resp;
        }
      }
      if (!required_pass) {
        return false;
      } else {
        return send;
      }
    };

    OerpJsEditor.prototype.save = function(func_aftersave) {
      var model, rid, send, view;
      view = this.$node.find('div.oerp-view:eq(0)');
      model = view.attr('oerp_model');
      rid = Number(view.attr('oerp_rid'));
      if (rid === 0) {
        send = [model, 'create', this.getSend()];
      } else {
        send = [model, 'write', [rid], this.getSend()];
      }
      return $.post('?q=oerp/execute/js', {
        send: JSON.stringify(send)
      }, function(rs) {
        return func_aftersave(rs);
      });
    };

    OerpJsEditor.prototype.reload = function(send, extend) {
      var final_send;
      if (extend == null) {
        extend = {};
      }
      if (send != null) {
        final_send = send;
      } else {
        final_send = this.clone(this.$node.data('send_bak'));
      }
      final_send = $.extend(final_send, extend);
      this.$node.data('send', final_send);
      return this.init();
    };

    OerpJsEditor.prototype.reset = function() {
      var send_bak;
      send_bak = this.clone(this.$node.data('send_bak'));
      this.$node.data('send', send_bak);
      return this.init();
    };

    OerpJsEditor.prototype.setDVals = function() {
      var dvals;
      dvals = this.data('dvals');
      if (dvals['#value'] != null) {
        this.$node.find('*[retrieve]').each((function(_this) {
          return function(ind, ele) {
            var $ele, funcLambda, src;
            $ele = $(ele);
            src = $ele.attr('retrieve');
            funcLambda = new Function('dialog', 'ele', 'values', src);
            return funcLambda(_this.$node, $ele, dvals['#value']);
          };
        })(this));
        this.$node.find(':input').each((function(_this) {
          return function(ind, ele) {
            var $ele, name, pat, val;
            $ele = $(ele);
            if ($ele.parents('div.field:eq(0)').attr('oerp_type') === 'many2one') {
              pat = /(.*)\[name\]/;
              name = pat.exec($ele.attr('name'));
              val = dvals['#value'][name[1]];
            } else {
              val = dvals['#value'][$ele.attr('name')];
            }
            if ((val == null) || (val['#value'] == null) || $ele.attr('no-override') || $ele.attr('reload')) {
              return null;
            }
            switch ($ele[0].type) {
              case 'hidden':
                return $ele.val(val['#value']);
              case 'textarea':
                return $ele.attr('value', val['#value']);
              case 'text':
                if (val['#text']) {
                  return $ele.val(val['#text']).attr('rid', val['#value']);
                } else {
                  return $ele.val(val['#value']);
                }
                break;
              case 'checkbox':
                if (val) {
                  return $ele.attr('checked', 'checked');
                } else {
                  return $ele.removeAttr('checked');
                }
                break;
              case 'select-one':
                return $ele.children('option[value="' + val['#value'] + '"]').attr('selected', 'selected');
            }
          };
        })(this));
        return this.$node.find('div.oerp-treeview').each((function(_this) {
          return function(ind, ele) {
            var $ele, UI, change, changes, name, rid, _results;
            $ele = $(ele);
            name = "view[" + ($(ele).attr('oerp_name')) + "]";
            changes = dvals['#value'][name];
            if (changes != null) {
              UI = $ele.parents("[data-awake='OerpTreeWidget']:eq(0)").data('UI');
              _results = [];
              for (rid in changes) {
                change = changes[rid];
                if (rid.substr(0, 2) === '0-') {
                  UI.addTr(change, rid);
                } else if (change['#value']) {
                  UI.updateTr(change, rid);
                }
                if (change['#delete']) {
                  _results.push(UI.delTr(rid));
                } else {
                  _results.push(void 0);
                }
              }
              return _results;
            }
          };
        })(this));
      }
    };

    OerpJsEditor.prototype.init = function() {
      this.$node.html('<em>Loading...</em>');
      return $.post('?q=oerp/view/editor/js', this.data('send'), (function(_this) {
        return function(json) {
          _this.$node.html(decodeURIComponent(eval(json)));
          new window.UI.Awaker(_this.$node);
          _this.setDVals();
          _this.$node.oerpformview();
          return _this.data('func_afterawake', true)();
        };
      })(this));
    };

    OerpJsEditor.prototype.createEle = function(send, dvals) {
      var ele;
      ele = $('<div class="awakable" data-awake="OerpJsEditor"/>');
      ele.data('send', send);
      ele.data('send_bak', this.clone(send));
      ele.data('dvals', dvals);
      return ele;
    };

    return OerpJsEditor;

  })(window.UI.Abstract);

  window.UI.OerpJsEditor = OerpJsEditor;

  OerpPrompt = (function(_super) {
    __extends(OerpPrompt, _super);

    function OerpPrompt() {
      this.createEle = __bind(this.createEle, this);
      this.init = __bind(this.init, this);
      this.adjustPosition = __bind(this.adjustPosition, this);
      this.getOption = __bind(this.getOption, this);
      this.close = __bind(this.close, this);
      this.getName = __bind(this.getName, this);
      return OerpPrompt.__super__.constructor.apply(this, arguments);
    }

    OerpPrompt.prototype.getName = function() {
      return "OerpPrompt";
    };

    OerpPrompt.prototype.close = function() {
      return this.$node.dialog('destroy').remove();
    };

    OerpPrompt.prototype.getOption = function() {
      return {
        close: (function(_this) {
          return function() {
            return _this.close();
          };
        })(this),
        width: 974,
        modal: true,
        autoOpen: false
      };
    };

    OerpPrompt.prototype.adjustPosition = function() {
      var height, overlay, wrapper;
      this.$node.dialog('option', 'position', 'center');
      wrapper = this.$node.parents('div.ui-dialog:eq(0)');
      height = wrapper.height() + wrapper.offset().top + 10;
      overlay = $('div.ui-widget-overlay');
      if (overlay.height() < height) {
        return overlay.height(height);
      }
    };

    OerpPrompt.prototype.init = function() {
      var $inner;
      $inner = this.$node.data('$inner');
      $inner.data('UIParent', this);
      this.$node.dialog(this.getOption());
      this.$node.html($inner);
      new window.UI.Awaker($inner, (function(_this) {
        return function() {
          return _this.adjustPosition();
        };
      })(this));
      return this.$node.dialog('open');
    };

    OerpPrompt.prototype.createEle = function(UIParent, $inner) {
      var ele, pool, src;
      pool = $('div#dialog-pool');
      if (!pool.length) {
        pool = $('<div id="dialog-pool"></div>').appendTo('body');
      }
      src = "<div class='awakable' data-awake='" + (this.getName()) + "'/>";
      ele = $(src).appendTo(pool);
      ele.data('UIParent', UIParent).data('$inner', $inner);
      return ele;
    };

    return OerpPrompt;

  })(window.UI.Abstract);

  window.UI.OerpPrompt = OerpPrompt;

  OerpJsEditorPrompt = (function(_super) {
    __extends(OerpJsEditorPrompt, _super);

    function OerpJsEditorPrompt() {
      this.createEle = __bind(this.createEle, this);
      this.getName = __bind(this.getName, this);
      return OerpJsEditorPrompt.__super__.constructor.apply(this, arguments);
    }

    OerpJsEditorPrompt.prototype.getName = function() {
      return "OerpJsEditorPrompt";
    };

    OerpJsEditorPrompt.prototype.createEle = function(UIParent, send, dvals) {
      var $inner;
      if (dvals == null) {
        dvals = null;
      }
      $inner = new window.UI.OerpJsEditor().createEle(send);
      $inner.data('dvals', dvals);
      return OerpJsEditorPrompt.__super__.createEle.call(this, UIParent, $inner);
    };

    return OerpJsEditorPrompt;

  })(window.UI.OerpPrompt);

  window.UI.OerpJsEditorPrompt = OerpJsEditorPrompt;

  OerpPromptForm = (function(_super) {
    __extends(OerpPromptForm, _super);

    function OerpPromptForm() {
      this.getOption = __bind(this.getOption, this);
      this.save = __bind(this.save, this);
      this.getName = __bind(this.getName, this);
      return OerpPromptForm.__super__.constructor.apply(this, arguments);
    }

    OerpPromptForm.prototype.getName = function() {
      return "OerpPromptForm";
    };

    OerpPromptForm.prototype.save = function() {
      var Inner;
      Inner = this.$node.data('$inner').data('UI');
      return Inner.save((function(_this) {
        return function(rs) {
          var UIParent, rid;
          rid = eval(rs);
          UIParent = _this.$node.data('UIParent');
          UIParent.changeRId(rid);
          return _this.close();
        };
      })(this));
    };

    OerpPromptForm.prototype.getOption = function() {
      var opts;
      opts = OerpPromptForm.__super__.getOption.call(this);
      opts['buttons'] = {
        Save: (function(_this) {
          return function() {
            return _this.save();
          };
        })(this)
      };
      return opts;
    };

    return OerpPromptForm;

  })(window.UI.OerpJsEditorPrompt);

  window.UI.OerpPromptForm = OerpPromptForm;

  OerpRowPromptEditor = (function(_super) {
    __extends(OerpRowPromptEditor, _super);

    function OerpRowPromptEditor() {
      this.getOption = __bind(this.getOption, this);
      this.update = __bind(this.update, this);
      this.getName = __bind(this.getName, this);
      return OerpRowPromptEditor.__super__.constructor.apply(this, arguments);
    }

    OerpRowPromptEditor.prototype.getName = function() {
      return "OerpRowPromptEditor";
    };

    OerpRowPromptEditor.prototype.update = function() {
      var send;
      send = this.$node.data('$inner').data('UI').getSend();
      if (send) {
        this.$node.data('UIParent').modifyTr(send);
        return this.$node.remove();
      } else {
        return alert('Missing values in required fields. Please check again.');
      }
    };

    OerpRowPromptEditor.prototype.getOption = function() {
      var opts;
      opts = OerpRowPromptEditor.__super__.getOption.call(this);
      opts['buttons'] = {
        Update: (function(_this) {
          return function() {
            return _this.update();
          };
        })(this)
      };
      return opts;
    };

    return OerpRowPromptEditor;

  })(window.UI.OerpJsEditorPrompt);

  window.UI.OerpRowPromptEditor = OerpRowPromptEditor;

  OerpTreeWidget = (function(_super) {
    __extends(OerpTreeWidget, _super);

    function OerpTreeWidget() {
      this.init = __bind(this.init, this);
      this.initBtns = __bind(this.initBtns, this);
      this.selTr = __bind(this.selTr, this);
      this.clearSel = __bind(this.clearSel, this);
      this.getTr = __bind(this.getTr, this);
      this.editTr = __bind(this.editTr, this);
      this.catchClk = __bind(this.catchClk, this);
      this.updateTd = __bind(this.updateTd, this);
      this.modifyTr = __bind(this.modifyTr, this);
      this.delTr = __bind(this.delTr, this);
      this.addTr = __bind(this.addTr, this);
      this.updateTr = __bind(this.updateTr, this);
      this.addTpl = __bind(this.addTpl, this);
      this.getTpl = __bind(this.getTpl, this);
      this.getCacheId = __bind(this.getCacheId, this);
      this.getRId = __bind(this.getRId, this);
      this.getEleName = __bind(this.getEleName, this);
      this.getVId = __bind(this.getVId, this);
      this.getModel = __bind(this.getModel, this);
      this.getTree = __bind(this.getTree, this);
      this.getView = __bind(this.getView, this);
      this.getName = __bind(this.getName, this);
      return OerpTreeWidget.__super__.constructor.apply(this, arguments);
    }

    OerpTreeWidget.prototype.getName = function() {
      return "OerpTreeWidget";
    };

    OerpTreeWidget.prototype.getView = function() {
      return this.$node.find('div.oerp-view');
    };

    OerpTreeWidget.prototype.getTree = function() {
      var tree;
      tree = this.getView().find('table.oerp-treeview:eq(0)');
      if (tree.length > 0) {
        return tree;
      } else {
        return false;
      }
    };

    OerpTreeWidget.prototype.getModel = function(level) {
      var mod;
      if (level == null) {
        level = 0;
      }
      mod = this.$clicked.parents("[oerp_model]:eq(" + level + ")").attr('oerp_model');
      return mod != null ? mod : '';
    };

    OerpTreeWidget.prototype.getVId = function(level) {
      var vid;
      if (level == null) {
        level = 0;
      }
      vid = this.$clicked.parents("[oerp_vid]:eq(" + level + ")").attr('oerp_vid');
      if (vid != null) {
        return vid;
      } else {
        return '';
      }
    };

    OerpTreeWidget.prototype.getEleName = function() {
      return this.getView().attr('oerp_name');
    };

    OerpTreeWidget.prototype.getRId = function() {
      return this.getTr().attr('oerp_rid');
    };

    OerpTreeWidget.prototype.getCacheId = function() {
      return this.getView().attr('cache_id');
    };

    OerpTreeWidget.prototype.getTpl = function() {
      var tr;
      tr = this.getTree().find('tr.oerp-tpl');
      if (tr.length > 0) {
        return tr;
      } else {
        return false;
      }
    };

    OerpTreeWidget.prototype.addTpl = function(vals, rid) {
      var newTr;
      if (rid != null) {
        rid = "0-" + this.getTree().find('tr.oerp-new').length;
      }
      newTr = this.getTpl().clone(true);
      newTr.attr('oerp_rid', rid).removeClass('oerp-tpl').removeClass('hide').addClass('oerp-new');
      this.getTree().removeClass('empty').find('tbody:eq(0)').append(newTr);
      return this.updateTr(vals, rid);
    };

    OerpTreeWidget.prototype.updateTr = function(vals, rid) {
      var $tr;
      $tr = this.$node.find("tr[oerp_rid='" + rid + "']");
      $tr.data('vals', vals);
      $tr.children('td[oerp_field]').each((function(_this) {
        return function(ind, ele) {
          var $td, val;
          $td = $(ele);
          val = vals['#value']["view[" + ($td.attr('oerp_field')) + "]"];
          if (val != null) {
            return _this.updateTd(val, $td);
          } else if ($td.attr('gu_alt_name')) {
            val = vals['#value']["view[" + ($td.attr('gu_alt_name')) + "]"];
            return _this.updateTd(val, $td);
          } else if ($td.children('span.oerp-changed').length === 0) {
            return $td.html("<span class='oerp-changed'>" + ($td.html()) + "</span>");
          }
        };
      })(this));
      $tr.addClass('toChange');
      $tr.nextAll('tr').each((function(_this) {
        return function(ind, ele) {
          var next_tr;
          next_tr = $(ele);
          if (!next_tr.attr('merged')) {
            return false;
          } else {
            return next_tr.addClass('toChange');
          }
        };
      })(this));
      return this.initBtns($tr);
    };

    OerpTreeWidget.prototype.addTr = function(vals) {
      var $newTr, rid, tail;
      tail = this.getTree().find('tr.oerp-new').length;
      rid = "0-" + tail;
      $newTr = this.getTpl().clone(true);
      $newTr.attr('oerp_rid', rid).removeClass('oerp-tpl').removeClass('hide').addClass('oerp-new');
      this.getTree().removeClass('empty').find('tbody:eq(0)').append($newTr);
      return this.updateTr(vals, rid);
    };

    OerpTreeWidget.prototype.delTr = function(rid) {
      var tr, val;
      if (rid == null) {
        rid = null;
      }
      tr = this.getTr(rid);
      if (tr != null) {
        val = tr.data('vals');
        if (tr.hasClass('toDelete')) {
          delete val['#delete'];
          if (val['#value'] != null) {
            tr.data('vals', val);
          } else {
            tr.removeData('vals');
          }
        } else if (val != null) {
          val['#delete'] = true;
          tr.data('val', val);
        } else {
          tr.data('vals', {
            '#delete': true
          });
        }
        tr.toggleClass('toDelete');
        return tr.nextAll('tr').each((function(_this) {
          return function(ind, ele) {
            var next_tr;
            next_tr = $(ele);
            if (next_tr.attr('merged')) {
              return next_tr.toggleClass('toDelete');
            } else {
              return false;
            }
          };
        })(this));
      }
    };

    OerpTreeWidget.prototype.modifyTr = function(vals) {
      if (this.getRId() === "0") {
        return this.addTr(vals);
      } else {
        return this.updateTr(vals, this.getRId());
      }
    };

    OerpTreeWidget.prototype.updateTd = function(val, $td) {
      if (val['#text']) {
        return $td.html(val['#text']);
      } else {
        return $td.html(val['#value']);
      }
    };

    OerpTreeWidget.prototype.catchClk = function(ev) {
      this.$clicked = $(ev.target);
      return this;
    };

    OerpTreeWidget.prototype.editTr = function() {
      var $ele, dvals, send;
      send = {
        par_model: this.getModel(1),
        par_vid: this.getVId(1),
        model: this.getModel(0),
        vid: this.getVId(0),
        name: this.getEleName(),
        rid: this.getRId(),
        cache_id: this.getCacheId(),
        type: 'form'
      };
      dvals = this.getTr().data('vals');
      $ele = new window.UI.OerpRowPromptEditor().createEle(this, send, dvals);
      return new window.UI.Awaker($ele);
    };

    OerpTreeWidget.prototype.getTr = function(rid) {
      if (rid == null) {
        rid = null;
      }
      if (rid != null) {
        return this.$node.find("tr[oerp_rid='" + rid + "']:eq(0)");
      } else if (this.$clicked.get(0).tagName === 'TR') {
        return this.$clicked;
      } else {
        return this.$clicked.parents('tr:eq(0)');
      }
    };

    OerpTreeWidget.prototype.clearSel = function() {
      var view;
      view = this.getView();
      view.find('tr.selected').removeClass('selected');
      return view.find('td.oerp-op div.oerp-button').addClass('ui-state-default').removeClass('ui-state-highlight');
    };

    OerpTreeWidget.prototype.selTr = function() {
      var op, tr, _results;
      tr = this.getTr();
      op = tr.find('td.oerp-op div.oerp-button');
      if (tr != null) {
        tr.toggleClass('selected');
        tr = tr.next('tr');
        _results = [];
        while (tr.length) {
          if (tr.attr('merged')) {
            tr.toggleClass('selected');
            _results.push(tr = tr.next('tr'));
          } else {
            break;
          }
        }
        return _results;
      }
    };

    OerpTreeWidget.prototype.initBtns = function() {
      var sig, tree;
      this.$node.find('.oerp-btn-del').unbind('click').click((function(_this) {
        return function(ev) {
          return _this.catchClk(ev).delTr();
        };
      })(this));
      this.$node.find('.oerp-btn-chk, .oerp-btn-select').unbind('click').click((function(_this) {
        return function(ev) {
          return _this.catchClk(ev).selTr();
        };
      })(this));
      this.$node.find('.oerp-btn-edit').unbind('click').click((function(_this) {
        return function(ev) {
          if (!_this.catchClk(ev).getTr().hasClass('toDelete')) {
            return _this.editTr();
          }
        };
      })(this));
      this.$node.find('.oerp-btn-add').unbind('click').click((function(_this) {
        return function(ev) {
          return _this.catchClk(ev).getTr().parents('table:eq(0)').find('tr[oerp_rid="0"] .oerp-btn-edit').click();
        };
      })(this));
      tree = this.getTree();
      tree.prev('table.sticky-header:eq(0)').find('.oerp-btn-add').click((function(_this) {
        return function(ev) {
          return $(ele).parents('div.oerp-treeview:eq(0)').find('table.oerp-treeview div.oerp-btn-add').click();
        };
      })(this));
      if (tree.hasClass('select-one')) {
        tree.find('tr[oerp_rid]').click((function(_this) {
          return function(ev) {
            _this.catchClk(ev);
            _this.clearSel();
            return _this.selTr();
          };
        })(this));
      }
      sig = tree.attr('signature');
      return $('thead .oerp-btn-select').unbind('click').click((function(_this) {
        return function(ev) {
          var $chk, $trs, selected;
          $chk = $(ev.target);
          selected = $chk.hasClass('selected');
          $chk.toggleClass('selected');
          $trs = $('tbody div.oerp-btn-select[signature=' + sig + ']:eq(0)').parents('table:eq(0)').find('tr').not('.oerp-tpl');
          if (selected) {
            return $trs.removeClass('selected');
          } else {
            $trs.filter('.sep-after').removeClass('selected');
            return $trs.not('.sep-after').addClass('selected');
          }
        };
      })(this));
    };

    OerpTreeWidget.prototype.init = function() {
      return this.initBtns();
    };

    return OerpTreeWidget;

  })(window.UI.Abstract);

  window.UI.OerpTreeWidget = OerpTreeWidget;

  OerpJsRecordSelector = (function(_super) {
    __extends(OerpJsRecordSelector, _super);

    function OerpJsRecordSelector() {
      this.getOption = __bind(this.getOption, this);
      this.formview = __bind(this.formview, this);
      this.select = __bind(this.select, this);
      this.getName = __bind(this.getName, this);
      return OerpJsRecordSelector.__super__.constructor.apply(this, arguments);
    }

    OerpJsRecordSelector.prototype.getName = function() {
      return "OerpJsRecordSelector";
    };

    OerpJsRecordSelector.prototype.select = function() {
      var $inner, UIParent, rid;
      UIParent = this.$node.data('UIParent');
      $inner = this.$node.data('$inner');
      rid = $inner.find('tr.selected').attr('oerp_rid');
      if (rid != null) {
        UIParent.changeRId(rid);
      }
      return this.close();
    };

    OerpJsRecordSelector.prototype.formview = function() {
      var UIParent, send;
      UIParent = this.$node.data('UIParent');
      this.close();
      send = UIParent.getFormSendData();
      send.rid = 0;
      return UIParent.createPrompt(UIParent, send);
    };

    OerpJsRecordSelector.prototype.getOption = function() {
      var opts;
      opts = OerpJsRecordSelector.__super__.getOption.call(this);
      opts['maxHeight'] = 400;
      opts['buttons'] = {
        OK: (function(_this) {
          return function() {
            return _this.select();
          };
        })(this),
        New: (function(_this) {
          return function() {
            return _this.formview();
          };
        })(this)
      };
      return opts;
    };

    return OerpJsRecordSelector;

  })(window.UI.OerpJsEditorPrompt);

  window.UI.OerpJsRecordSelector = OerpJsRecordSelector;

  OerpMany2oneWidget = (function(_super) {
    __extends(OerpMany2oneWidget, _super);

    function OerpMany2oneWidget() {
      this.init = __bind(this.init, this);
      this.changeRId = __bind(this.changeRId, this);
      this.update = __bind(this.update, this);
      this.initSearch = __bind(this.initSearch, this);
      this.getSearchSendData = __bind(this.getSearchSendData, this);
      this.getDomain = __bind(this.getDomain, this);
      this.initEdit = __bind(this.initEdit, this);
      this.createPrompt = __bind(this.createPrompt, this);
      this.getFormSendData = __bind(this.getFormSendData, this);
      this.getRid = __bind(this.getRid, this);
      this.getEleName = __bind(this.getEleName, this);
      this.getModel = __bind(this.getModel, this);
      this.initUpdate = __bind(this.initUpdate, this);
      this.getInput = __bind(this.getInput, this);
      this.getName = __bind(this.getName, this);
      return OerpMany2oneWidget.__super__.constructor.apply(this, arguments);
    }

    OerpMany2oneWidget.prototype.getName = function() {
      return "OerpMany2oneWidget";
    };

    OerpMany2oneWidget.prototype.getInput = function() {
      return this.$node.find('input.form-text');
    };

    OerpMany2oneWidget.prototype.initUpdate = function() {
      return this.getInput().change((function(_this) {
        return function() {
          return _this.update();
        };
      })(this));
    };

    OerpMany2oneWidget.prototype.getModel = function() {
      return this.getInput().attr('model');
    };

    OerpMany2oneWidget.prototype.getEleName = function() {
      return this.getInput().attr('name');
    };

    OerpMany2oneWidget.prototype.getRid = function() {
      return Number(this.getInput().attr('rid'));
    };

    OerpMany2oneWidget.prototype.getFormSendData = function() {
      return {
        model: this.getModel(),
        name: this.getEleName(),
        rid: this.getRid(),
        type: 'form'
      };
    };

    OerpMany2oneWidget.prototype.createPrompt = function(UIParent, send) {
      var $ele;
      $ele = new window.UI.OerpPromptForm().createEle(UIParent, send);
      return new window.UI.Awaker($ele);
    };

    OerpMany2oneWidget.prototype.initEdit = function() {
      return this.$node.find('div.oerp-btn-edit').click((function(_this) {
        return function(ev) {
          var $btn;
          $btn = $(ev.target);
          if ($btn.hasClass('ui-state-disabled')) {
            false;
          }
          return _this.createPrompt(_this, _this.getFormSendData());
        };
      })(this));
    };

    OerpMany2oneWidget.prototype.getDomain = function() {
      var _ref;
      return (_ref = this.getInput().attr('domain')) != null ? _ref : null;
    };

    OerpMany2oneWidget.prototype.getSearchSendData = function() {
      return {
        model: this.getModel(),
        name: this.getName(),
        type: 'tree',
        domain: this.getDomain()
      };
    };

    OerpMany2oneWidget.prototype.initSearch = function() {
      return this.$node.find('div.oerp-btn-search').click((function(_this) {
        return function(ev) {
          var $btn, $ele;
          $btn = $(ev.target);
          if ($btn.hasClass('ui-state-disabled')) {
            false;
          }
          $ele = new window.UI.OerpJsRecordSelector().createEle(_this, _this.getSearchSendData());
          return new window.UI.Awaker($ele);
        };
      })(this));
    };

    OerpMany2oneWidget.prototype.update = function() {
      var send;
      send = [this.getModel(), 'name_get', [this.getRid()]];
      if (this.$node.parents('div.searchpanel:eq(0)').length) {
        return false;
      }
      return $.post('?q=oerp/execute/js', {
        send: JSON.stringify(send)
      }, (function(_this) {
        return function(data) {
          var resp;
          resp = eval(data);
          return _this.getInput().attr('value', resp[0][1]);
        };
      })(this));
    };

    OerpMany2oneWidget.prototype.changeRId = function(rid) {
      if (typeof rid !== 'boolean') {
        this.getInput().attr('rid', rid);
      }
      this.update();
      return this.getInput().change();
    };

    OerpMany2oneWidget.prototype.init = function() {
      this.initUpdate();
      this.initEdit();
      return this.initSearch();
    };

    return OerpMany2oneWidget;

  })(window.UI.Abstract);

  window.UI.OerpMany2oneWidget = OerpMany2oneWidget;

  OerpTabs = (function(_super) {
    __extends(OerpTabs, _super);

    function OerpTabs() {
      this.init = __bind(this.init, this);
      this.getName = __bind(this.getName, this);
      return OerpTabs.__super__.constructor.apply(this, arguments);
    }

    OerpTabs.prototype.getName = function() {
      return "OerpTab";
    };

    OerpTabs.prototype.init = function() {
      return this.$node.tabs();
    };

    return OerpTabs;

  })(window.UI.Abstract);

  window.UI.OerpTabs = OerpTabs;

  OerpSearchPanel = (function(_super) {
    __extends(OerpSearchPanel, _super);

    function OerpSearchPanel() {
      this.init = __bind(this.init, this);
      this.clickClear = __bind(this.clickClear, this);
      this.clickFind = __bind(this.clickFind, this);
      this.buildDomain = __bind(this.buildDomain, this);
      this.isDialog = __bind(this.isDialog, this);
      this.getForm = __bind(this.getForm, this);
      this.getJsEditor = __bind(this.getJsEditor, this);
      this.getName = __bind(this.getName, this);
      return OerpSearchPanel.__super__.constructor.apply(this, arguments);
    }

    OerpSearchPanel.prototype.getName = function() {
      return "OerpSearchPanel";
    };

    OerpSearchPanel.prototype.getJsEditor = function() {
      return this.$node.parents('[data-awake="OerpJsEditor"]:eq(0)').data('UI');
    };

    OerpSearchPanel.prototype.getForm = function() {
      return this.$node.parents('form:eq(0)');
    };

    OerpSearchPanel.prototype.isDialog = function() {
      return this.$node.parents('div.ui-dialog:eq(0)').length > 0;
    };

    OerpSearchPanel.prototype.buildDomain = function() {
      var $ele, $form, domain, fld, m, pat, pat_type, pats, post, val, _i, _len;
      $form = this.getForm();
      post = $form.serializeArray();
      pats = {
        genernal: /.*\[_search\]\[([^\[]*)\]$/,
        float: /.*\[_search\]\[([^\[]*)\]\[(GE|LE)\]$/
      };
      domain = [];
      for (_i = 0, _len = post.length; _i < _len; _i++) {
        fld = post[_i];
        for (pat_type in pats) {
          pat = pats[pat_type];
          m = pat.exec(fld.name);
          if (!m || !m[1]) {
            continue;
          }
          if (fld.value.length) {
            if (m[2]) {
              switch (m[2]) {
                case 'GE':
                  domain.push([m[1], '>=', fld.value]);
                  break;
                case 'LE':
                  domain.push([m[1], '<=', fld.value]);
              }
            } else {
              $ele = $form.find("[name='" + fld.name + "']");
              val = fld.value;
              switch ($ele.parents('[oerp_type]:eq(0)').attr('oerp_type')) {
                case 'boolean':
                  switch (val) {
                    case 'null':
                      continue;
                    case 'yes':
                      val = 1;
                      break;
                    case 'no':
                      val = 0;
                  }
              }
              domain.push([m[1], $ele.attr('op'), val]);
            }
          }
        }
      }
      return domain;
    };

    OerpSearchPanel.prototype.clickFind = function(ev) {
      var UISelector, send;
      ev.preventDefault();
      UISelector = this.getJsEditor();
      send = this.clone(UISelector.$node.data('send'));
      send.domain = JSON.stringify(this.buildDomain());
      return this.getJsEditor().reload(send);
    };

    OerpSearchPanel.prototype.clickClear = function(ev) {
      ev.preventDefault();
      return this.getJsEditor().reset();
    };

    OerpSearchPanel.prototype.init = function() {
      var $form;
      if (!this.isDialog()) {
        return false;
      }
      $form = this.getForm();
      $form.find('input[name="func:find"]').click((function(_this) {
        return function(ev) {
          return _this.clickFind(ev);
        };
      })(this));
      return $form.find('input[name="func:clear"]').click((function(_this) {
        return function(ev) {
          return _this.clickClear(ev);
        };
      })(this));
    };

    return OerpSearchPanel;

  })(window.UI.Abstract);

  window.UI.OerpSearchPanel = OerpSearchPanel;

}).call(this);
